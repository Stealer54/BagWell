import os
import discord
from discord.ext import commands
from discord import app_commands, Interaction
from discord.ui import View, Select, Modal, TextInput
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ .env —Ñ–∞–π–ª–∞
load_dotenv()
TOKEN = os.getenv("DISCORD_TOKEN")  # ‚Üê –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞!
CATEGORY_NAME = "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"     # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
intents = discord.Intents.default()
intents.message_content = True
intents.guilds = True

bot = commands.Bot(command_prefix="!", intents=intents)
tree = bot.tree

# --- –ú–æ–¥–∞–ª–∫–∞ –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö ---
class ChannelInfoModal(Modal, title="–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞"):
    nickname = TextInput(label="–ù–∏–∫", placeholder="–ü—Ä–∏–º–µ—Ä: Jacob_Stealer")
    date = TextInput(label="–î–∞—Ç–∞", placeholder="–ü—Ä–∏–º–µ—Ä: 06.06.2025")
    level = TextInput(label="LVL", placeholder="–ü—Ä–∏–º–µ—Ä: 2")

    def __init__(self, channel_type: str):
        super().__init__()
        self.channel_type_value = channel_type

    async def on_submit(self, interaction: Interaction):
        guild = interaction.guild
        category = discord.utils.get(guild.categories, name=CATEGORY_NAME)

        if category is None:
            await interaction.response.send_message("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", ephemeral=True)
            return

        channel_name = self.nickname.value.strip().replace(" ", "_")
        existing_channel = discord.utils.get(guild.text_channels, name=channel_name)
        if existing_channel:
            await interaction.response.send_message("‚ö†Ô∏è –ö–∞–Ω–∞–ª —Å —Ç–∞–∫–∏–º –Ω–∏–∫–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", ephemeral=True)
            return

        channel = await guild.create_text_channel(name=channel_name, category=category)
        message = f"{self.nickname.value} | {self.date.value} | {self.level.value} | {self.channel_type_value}"
        await channel.send(message)

        await interaction.response.send_message(f"‚úÖ –ö–∞–Ω–∞–ª {channel.mention} —Å–æ–∑–¥–∞–Ω!", ephemeral=True)

# --- –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞—è–≤–∫–∏ ---
class ChannelTypeSelect(Select):
    def __init__(self):
        options = [
            discord.SelectOption(label="–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ"),
            discord.SelectOption(label="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"),
            discord.SelectOption(label="–õ–∏–¥–µ—Ä—Å–∫–∏–π –ø–æ—Å—Ç (–ì–æ—Å)"),
            discord.SelectOption(label="–õ–∏–¥–µ—Ä—Å–∫–∏–π –ø–æ—Å—Ç (–ù–µ–ª–µ–≥–∞–ª—ã)")
        ]
        super().__init__(placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏", options=options, min_values=1, max_values=1)

    async def callback(self, interaction: Interaction):
        await interaction.response.send_modal(ChannelInfoModal(channel_type=self.values[0]))

# --- View —Å —Å–µ–ª–µ–∫—Ç–æ–º ---
class CreateChannelView(View):
    def __init__(self):
        super().__init__(timeout=None)
        self.add_item(ChannelTypeSelect())

# --- –ö–æ–º–∞–Ω–¥–∞ /create ---
@tree.command(name="create", description="–°–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª –ø–æ –∑–∞—è–≤–∫–µ")
async def create(interaction: Interaction):
    view = CreateChannelView()
    await interaction.response.send_message("üîΩ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏:", view=view, ephemeral=True)

# --- –ó–∞–ø—É—Å–∫ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è ---
@bot.event
async def on_ready():
    try:
        synced = await tree.sync()
        print(f"‚úÖ Synced {len(synced)} slash commands.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ sync: {e}")
    print(f"üîó Logged in as {bot.user}")

# --- –ù–æ–≤—ã–π –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ ---
class LogTypeSelect(Select):
    def __init__(self):
        options = [
            discord.SelectOption(label="–ó–∞—Å–ª—É–≥–∏", emoji="‚úÖ"),
            discord.SelectOption(label="–ö–æ—Å—è–∫", emoji="‚ö†Ô∏è")
        ]
        super().__init__(placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø", min_values=1, max_values=1, options=options)

    async def callback(self, interaction: Interaction):
        await interaction.response.send_modal(LogDescriptionModal(log_type=self.values[0]))

# --- –ú–æ–¥–∞–ª–∫–∞ —Ç–æ–ª—å–∫–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º ---
class LogDescriptionModal(Modal, title="–û–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è"):
    def __init__(self, log_type: str):
        super().__init__()
        self.log_type = log_type
        self.desc_input = TextInput(label="–ß—Ç–æ —Å–¥–µ–ª–∞–ª –∏–≥—Ä–æ–∫", style=discord.TextStyle.paragraph)
        self.add_item(self.desc_input)

    async def on_submit(self, interaction: Interaction):
        description = self.desc_input.value.strip()
        color = discord.Color.green() if self.log_type == "–ó–∞—Å–ª—É–≥–∏" else discord.Color.red()

        embed = discord.Embed(
            title=f"**{self.log_type.upper()}**",
            description=description,
            color=color
        )

        await interaction.channel.send(embed=embed)
        await interaction.response.send_message("‚úÖ –õ–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω!", ephemeral=True)

# --- View —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ ---
class LogView(View):
    def __init__(self):
        super().__init__(timeout=None)
        self.add_item(LogTypeSelect())

# --- Slash-–∫–æ–º–∞–Ω–¥–∞ /log ---
@tree.command(name="log", description="–î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥ (–ó–∞—Å–ª—É–≥–∏ –∏–ª–∏ –ö–æ—Å—è–∫)")
async def log(interaction: Interaction):
    await interaction.response.send_message("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:", view=LogView(), ephemeral=True)

bot.run(TOKEN)
